{"version":3,"sources":["webpack://dotnet-generate-vscode/./src/extension.ts","webpack://dotnet-generate-vscode/external \"child_process\"","webpack://dotnet-generate-vscode/external \"path\"","webpack://dotnet-generate-vscode/external \"vscode\"","webpack://dotnet-generate-vscode/webpack/bootstrap","webpack://dotnet-generate-vscode/webpack/startup"],"names":["context","disposable","vscode","commands","registerCommand","target","folder","console","log","undefined","window","activeTextEditor","Uri","parse","path","dirname","document","uri","fsPath","workspace","workspaceFolders","_getFolder","fileName","showInputBox","placeHolder","prompt","schematic","showQuickPick","label","value","_pickSchematic","command","cp","exec","cwd","err","stdout","stderr","showInformationMessage","showErrorMessage","message","_runCommand","subscriptions","push","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"mappings":"8bAEA,eACA,SACA,SA0EA,oBAAyBA,GACvB,IAAIC,EAAaC,EAAOC,SAASC,gBAC/B,kCACOC,GAAuB,EAAD,gCAC3B,MAAMC,EAvEZ,SAAoBD,GAClB,OAAIA,GACFE,QAAQC,IAAI,0BACLH,QAEgCI,IAAnCP,EAAOQ,OAAOC,kBAChBJ,QAAQC,IAAI,sCACLN,EAAOU,IAAIC,MAChBC,EAAKC,QAAQb,EAAOQ,OAAOC,iBAAiBK,SAASC,IAAIC,eAEZT,IAAtCP,EAAOiB,UAAUC,kBAC1Bb,QAAQC,IAAI,oCACLN,EAAOiB,UAAUC,iBAAiB,GAAGH,UAE5CV,QAAQC,IAAI,8BAyDGa,CAAWhB,GAC1B,IAAKC,EAAQ,OAEb,IAAIgB,QAAiBpB,EAAOQ,OAAOa,aAAa,CAC9CC,YAAa,YACbC,OAAQ,2BAEV,IAAKH,EAAU,OAEf,MAAMI,QA5DZ,W,yCAoBE,aAAaxB,EAAOQ,OAAOiB,cAnBW,CACpC,CACEC,MAAO,QACPC,MAAO,SAET,CACED,MAAO,YACPC,MAAO,aAET,CACED,MAAO,OACPC,MAAO,QAET,CACED,MAAO,oBACPC,MAAO,uBA4CiBC,GACnBJ,UAtCX,SACEA,EACApB,EACAgB,G,yCAEA,MAAMS,EAAU,mBAAmBL,aAAS,EAATA,EAAWG,SAASP,IAEvDf,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAOQ,KAAO,IAAMiB,GAChCC,EAAGC,KACDF,EACA,CACEG,IAAK5B,EAAOQ,OAEd,CAACqB,EAAKC,EAAQC,KACRD,GAAQlC,EAAOQ,OAAO4B,uBAAuBF,GAE7CC,GAAQnC,EAAOQ,OAAO6B,iBAAiBF,GAEvCF,GAAKjC,EAAOQ,OAAO6B,iBAAiBJ,EAAIK,eAqBtCC,CAAYf,EAAWpB,EAAQgB,SAIzCtB,EAAQ0C,cAAcC,KAAK1C,IAI7B,2B,QCtGA2C,EAAOC,QAAUC,QAAQ,kB,QCAzBF,EAAOC,QAAUC,QAAQ,S,QCAzBF,EAAOC,QAAUC,QAAQ,YCCrBC,EAA2B,GCE3BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBzC,IAAjB0C,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,IAOV,OAHAO,EAAoBF,GAAUG,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,QClBWI,CAAoB,K","file":"extension.js","sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport path = require(\"path\");\nimport * as cp from \"child_process\";\nimport * as vscode from \"vscode\";\n\ninterface ISchematic {\n  label: string;\n  value: string;\n}\n\nfunction _getFolder(target: vscode.Uri) {\n  if (target) {\n    console.log(\"_getFolder from target\");\n    return target;\n  } else {\n    if (vscode.window.activeTextEditor !== undefined) {\n      console.log(\"_getFolder from activateTextEditor\");\n      return vscode.Uri.parse(\n        path.dirname(vscode.window.activeTextEditor.document.uri.fsPath)\n      );\n    } else if (vscode.workspace.workspaceFolders !== undefined) {\n      console.log(\"_getFolder from workspaceFolders\");\n      return vscode.workspace.workspaceFolders[0].uri;\n    } else {\n      console.log(\"_getFolder no folder found\");\n      return;\n    }\n  }\n}\n\nasync function _pickSchematic() {\n  const schematics: Array<ISchematic> = [\n    {\n      label: \"Class\",\n      value: \"class\",\n    },\n    {\n      label: \"Interface\",\n      value: \"interface\",\n    },\n    {\n      label: \"Enum\",\n      value: \"enum\",\n    },\n    {\n      label: \"Interface & Class\",\n      value: \"interfaceclass\",\n    },\n  ];\n\n  return await vscode.window.showQuickPick<ISchematic>(schematics);\n}\n\nasync function _runCommand(\n  schematic: ISchematic,\n  folder: vscode.Uri,\n  fileName: string\n) {\n  const command = `dotnet generate ${schematic?.value} ${fileName}`;\n\n  console.log(folder);\n  console.log(folder.path + \" \" + command);\n  cp.exec(\n    command,\n    {\n      cwd: folder.path,\n    },\n    (err, stdout, stderr) => {\n      if (stdout) vscode.window.showInformationMessage(stdout);\n\n      if (stderr) vscode.window.showErrorMessage(stderr);\n\n      if (err) vscode.window.showErrorMessage(err.message);\n    }\n  );\n}\n\nexport function activate(context: vscode.ExtensionContext) {\n  let disposable = vscode.commands.registerCommand(\n    \"dotnet-generate-vscode.addFile\",\n    async (target: vscode.Uri) => {\n      const folder = _getFolder(target);\n      if (!folder) return;\n\n      let fileName = await vscode.window.showInputBox({\n        placeHolder: \"File name\",\n        prompt: \"Please enter file name\",\n      });\n      if (!fileName) return;\n\n      const schematic = await _pickSchematic();\n      if (!schematic) return;\n\n      await _runCommand(schematic, folder, fileName);\n    }\n  );\n\n  context.subscriptions.push(disposable);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n","module.exports = require(\"child_process\");;","module.exports = require(\"path\");;","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(112);\n"],"sourceRoot":""}